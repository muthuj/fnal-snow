#!/usr/bin/env perl

=head1 NAME

snow-ticket-reopen - re-opens a Service Now ticket

=head1 SYNOPSIS

B<snow-ticket-reopen> F<INCIDENT_NUMBER>

B<snow-ticket-reopen> --man

=head1 DESCRIPTION

snow-ticket-reopen re-opens a specified Incident number.  The updated
Incident information is then printed to STDOUT.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

our $CONFIG_FILE = '/etc/snow/config.yaml';

our $DEBUG = 0;
our $USER  = $ENV{'REMOTE_USER'} || $ENV{'USER'} || getpwuid ($>);
our $CODE  = 'Other (must describe below)';

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use FNAL::SNOW;

$|++;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### error_usage (ERROR)
# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-msg => $error, -exit_status => 2, -verbose => 1);
}

### debug (MSG)
# Print a debugging message if $DEBUG is set.
sub debug { if ($DEBUG) { warn "@_\n" } }

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    'd|debug'  => \$DEBUG,
    'c|config' => \$CONFIG_FILE,
    'u|user=s' => \$USER,
    'code=s'   => \$CODE,
    'man'      => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'   => sub { pod2usage (-verbose => 1) }) || error_usage ();

my ($tktnum, @rest) = @ARGV;
error_usage ("no ticket listed") unless ($tktnum);

debug "Creating FNAL::SNOW object: $CONFIG_FILE";
my $SNOW = FNAL::SNOW->init ('config_file' => $CONFIG_FILE, 'debug' => $DEBUG);
my $CONFIG = $SNOW->config_hash;

debug "Connecting to ServiceNow at $CONFIG->{servicenow}->{url}";
$SNOW->connect or die "could not connect to SN\n";

debug "Looking up ticket '$tktnum'";
my @ticket = $SNOW->tkt_by_number ($tktnum);
unless (@ticket) { die "unable to load ticket: '$tktnum'\n"; }
unless (scalar @ticket == 1) {
    die "too many matches for ticket '$tktnum'\n";
}
my $tkt = $ticket[0];

unless ($SNOW->tkt_is_resolved ($tkt)) {
    print "ticket is not closed: '$tktnum'\n";
    print scalar $SNOW->tkt_string_base ($tkt);
    exit 1;
}

debug "Reopening ticket";
my @return = $SNOW->tkt_reopen ($$tkt{'number'});

my $return = 0;
if (scalar @return > 1) {
    print "too many matches after update\n";
    $return = 2;
} elsif (scalar @return < 1) {
    print "failed to reassign: no matches found on update()\n";
    $return = 3;
}

foreach my $ret (@return) {
    if (ref $ret && $ret->{number} eq $tkt->{number}) {
        print scalar $SNOW->tkt_string_base ($SNOW->tkt_by_number($tktnum));
    } elsif (ref $ret) {
        print "returned object did not match our original ticket number";
        print scalar $SNOW->tkt_string_base ($ret);
        $return = 1;
    } else {
        print "error: $ret\n";
        $return = 1;
    }
}

exit $return;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item I<INCIDENT_NUMBER>

ID of an ticket number to update.  You can leave off the F<INC0+> values.

=item B<--config> I<CONFIG>

=item B<--debug>

Print debugging information on STDERR.

=item B<--help>

Prints out basic full help documentation and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<FNAL::SNOW>

=head1 EXAMPLES

    snow-ticket-reopen INC389936

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
