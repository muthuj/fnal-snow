#!/usr/bin/env perl

=head1 NAME

snow-ticket-assign - assign a Service Now ticket to a user/group

=head1 SYNOPSIS

B<snow-ticket-assign> F<INCIDENT_NUMBER> --group I<GROUP>

B<snow-ticket-assign> F<INCIDENT_NUMBER> --user I<USER> 

B<snow-ticket-assign> F<INCIDENT_NUMBER> --group I<GROUP> --user I<USER>

B<snow-ticket-assign> F<INCIDENT_NUMBER> --user ''

B<snow-ticket-assign> --man

=head1 DESCRIPTION

snow-ticket-assign updates, the B<assigned_to> field, the B<assignment_group>
field, or both, for a specified Incident number.  The updated Incident
information is then printed to STDOUT.

Note that if you want to clear the assignment field, you can set I<--user ''>.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

# these should move
use lib '/home/tskirvin/rpm/fnal-snow/lib';
our $CONFIG_FILE = '/home/tskirvin/rpm/fnal-snow/etc/snow/config.yaml';

our $DEBUG = 0;

use vars qw/$USER $GROUP/;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use FNAL::SNOW;

$|++;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### error_usage (ERROR)
# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-msg => $error, -exit_status => 2, -verbose => 1);
}

### debug (MSG)
# Print a debugging message if $DEBUG is set.
sub debug { if ($DEBUG) { warn "@_\n" } }

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    'd|debug'   => \$DEBUG,
    'c|config'  => \$CONFIG_FILE,
    'u|user=s'  => \$USER,
    'g|group=s' => \$GROUP,
    'man'      => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'   => sub { pod2usage (-verbose => 1) }) || error_usage ();

unless (defined $USER or defined $GROUP) {
    error_usage ("must define a user (may be blank), a group, or both");
}

my ($tktnum, @rest) = @ARGV;
error_usage ("no tkt listed" ) unless ($tktnum);


debug "Creating FNAL::SNOW object: $CONFIG_FILE";
my $SNOW = FNAL::SNOW->init ('config_file' => $CONFIG_FILE, 'debug' => $DEBUG);
my $CONFIG = $SNOW->config_hash;

debug "Connecting to ServiceNow at $CONFIG->{servicenow}->{url}";
$SNOW->connect or die "could not connect to SN\n";

debug "Looking up tkt '$tktnum'";
my @tkt = $SNOW->tkt_by_number ($tktnum);
unless (@tkt) { die "unable to load tkt: '$tktnum'\n"; }
unless (scalar @tkt == 1) {
    die "too many matches for tkt '$tktnum'\n";
}
my $tkt = $tkt[0];

debug sprintf ("Assigning tkt to %s/%s",
    $GROUP || '*none*', $USER || '*none*');
my @return = $SNOW->tkt_assign ($$tkt{'number'}, $GROUP, $USER);

my $return = 0;
if (scalar @return > 1) {
    print "too many matches after update\n";
    $return = 2;
} elsif (scalar @return < 1) {
    print "failed to reassign: no matches found on update()\n";
    $return = 3;
}

foreach my $ret (@return) {
    if (ref $ret && $ret->{number} eq $tkt->{number}) {
        print scalar $SNOW->tkt_string_short ($SNOW->tkt_by_number($tktnum));
    } elsif (ref $ret) {
        print "returned object did not match our original tkt number";
        print scalar $SNOW->tkt_string_short ($ret);
        $return = 1;
    } else {
        print "error: $ret\n";
        $return = 1;
    }
}

exit $return;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item I<INCIDENT_NUMBER>

ID of a ticket number to update.  You can leave off the F<INC0+> values.

=item B<--config> I<CONFIG>

=item B<--debug>

Print debugging information on STDERR.

=item B<--group> I<GROUP>

Assign the ticket to group I<GROUP>.  No default; if we don't get a value, we
won't set the assignment_group value.

=item B<--user> I<USER>

Assign the ticket to user I<USER>.  No default; if we don't get a value, we
won't update the assigned_to value.

=item B<--help>

Prints out basic full help documentation and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<FNAL::SNOW>

    snow-ticket-assign INC389936 --group CMS-CIS
    snow-ticket-assign INC389936 --group CMS-CIS --user tskirvin

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
