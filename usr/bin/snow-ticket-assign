#!/usr/bin/env perl

=head1 NAME

snow-ticket-assign - assign a Service Now ticket to a user/group

=head1 SYNOPSIS

B<snow-ticket-assign> INC00000534135 --group foo

B<snow-ticket-assign> INC00000534135 --user bar

B<snow-ticket-assign> INC00000534135 --group foobar --user baz

B<snow-ticket-assign> INC00000534135 --user ''

B<snow-ticket-assign> --man

=head1 DESCRIPTION

snow-ticket-assign updates the B<assigned_to> field, the B<assignment_group>
field, or both, for a specified Incident number.  The updated Incident
information is then printed to STDOUT.

Note that if you want to clear the assignment field, you can set I<--user ''>.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

our $CONFIG_FILE = '/etc/snow/config.yaml';

our $DEBUG = 0;

use vars qw/$USER $GROUP/;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use FNAL::SNOW;

$|++;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### error_usage (ERROR)
# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-msg => $error, -exit_status => 2, -verbose => 1);
}

### debug (MSG)
# Print a debugging message if $DEBUG is set.
sub debug { if ($DEBUG) { warn "@_\n" } }

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    'd|debug'    => \$DEBUG,
    'c|config=s' => \$CONFIG_FILE,
    'u|user=s'   => \$USER,
    'g|group=s'  => \$GROUP,
    'man'        => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'     => sub { pod2usage (-verbose => 1) }) || error_usage ();

unless (defined $USER or defined $GROUP) {
    error_usage ("must define a user (may be blank), a group, or both");
}

my ($tktnum, @rest) = @ARGV;
error_usage ("no tkt listed" ) unless ($tktnum);

debug "Creating FNAL::SNOW object: $CONFIG_FILE";
my $SNOW = FNAL::SNOW->init ('config_file' => $CONFIG_FILE, 'debug' => $DEBUG);
my $CONFIG = $SNOW->config_hash;

debug "Connecting to ServiceNow at $CONFIG->{servicenow}->{url}";
$SNOW->connect or die "could not connect to SN\n";

my $uid = '';
if ($USER) {
    debug "Looking up user '$USER'";
    my $u = $SNOW->user_by_username ($USER);
    unless ($u) { die "invalid user: $USER\n" }
    $uid = $u->{'sys_id'};
}

my $gid = '';
if ($GROUP) {
    debug "Looking up group '$GROUP'";
    my $g = $SNOW->group_by_groupname ($GROUP);
    unless ($g) { die "invalid group: $GROUP\n" }
    $gid = $g->{'sys_id'};
}

debug "Looking up tkt '$tktnum'";
my @tkt = $SNOW->tkt_by_number ($tktnum);
unless (@tkt) { die "unable to load tkt: '$tktnum'\n"; }
unless (scalar @tkt == 1) { die "too many matches for tkt '$tktnum'\n" }
my $tkt = $tkt[0];

$GROUP ||= $tkt->result->{'dv_assignment_group'};
unless ($GROUP) { die "ticket is not in a group, no --group passed in\n" }

if ($USER) {
    debug ("confirming that user '$USER' is in group '$GROUP'");
    die "user '$USER' is not in group '$GROUP'\n" 
        unless $SNOW->user_in_group ($USER, $GROUP);
}

debug sprintf ("Assigning tkt to %s/%s",
    $GROUP || '*none*', $USER || '*none*');
my @return = $SNOW->tkt_assign ($tkt, $GROUP, $uid);

if    (scalar @return > 1) { die "too many matches after update\n" }
elsif (scalar @return < 1) { die "failed to reassign: no matches found\n" }

foreach my $ret (@return) {
    my $error = $SNOW->tkt_compare ($tkt, $ret);
    if ($error) { die "error: $error\n" }
}

print scalar $SNOW->tkt_string_short ($SNOW->tkt_by_number ($tktnum));
exit 0;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item I<TICKET_NUMBER>

ID of a ticket number to update.  You can leave off the F<INC0+> values.

=item B<--config> I<CONFIG>

=item B<--debug>

Print debugging information on STDERR.

=item B<--group> I<GROUP>

Assign the ticket to group I<GROUP>.  No default; if we don't get a value, we
won't set the assignment_group value.

=item B<--user> I<USER>

Assign the ticket to user I<USER>.  No default; if we don't get a value, we
won't update the assigned_to value.

=item B<--help>

Prints out basic full help documentation and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<FNAL::SNOW>

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014-2015, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
