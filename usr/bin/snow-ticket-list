#!/usr/bin/env perl

=head1 NAME

snow-ticket-list - lists matching Service Now tickets

=head1 SYNOPSIS

B<snow-ticket-list> --query assign --user I<USER>

B<snow-ticket-list> --query group 

B<snow-ticket-list> --query submit --user `whoami` 

B<snow-ticket-list> --query unassigned --group I<GROUP>

B<snow-ticket-list> --query unresolved --date "now"

B<snow-ticket-list> --man

=head1 DESCRIPTION

snow-ticket-list prints ticket summaries for matching entries in the Service
Now ticket tables.  

Note that each query can match a maximum of 250 entries.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

our $CONFIG_FILE = '/etc/snow/config.yaml';

## Default values, these should all be accessible via command-line parameters
our $DATE     = 'now';
our $DEBUG    = 0;
our $GROUP    = 'all';
our $QUERY    = 'group';
our $SUBQUERY = 'open';
our $TYPE     = 'incident';
our $USER     = getpwuid ($>);

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Date::Manip;
use Getopt::Long;
use Pod::Usage;
use FNAL::SNOW;

$|++;

##############################################################################
### Subroutines ##############################################################
##############################################################################

# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-exit_status => 2, -verbose => 1);
}

### debug (MSG)
# Print a debugging message if $DEBUG is set.
sub debug { if ($DEBUG) { warn "@_\n" } }

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    't|type=s'     => \$TYPE,
    'q|query=s'    => \$QUERY,
    's|subquery=s' => \$SUBQUERY,
    'g|group=s'    => \$GROUP,
    'u|user=s'     => \$USER,
    'debug'        => \$DEBUG,
    'date=s'       => \$DATE,
    'c|config=s'   => \$CONFIG_FILE,
    'man'      => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'   => sub { pod2usage (-verbose => 1) }) || error_usage ();

debug "Creating FNAL::SNOW object: $CONFIG_FILE";
my $SNOW = FNAL::SNOW->init ('config_file' => $CONFIG_FILE, 'debug' => $DEBUG);
my $CONFIG = $SNOW->config_hash;

debug "Connecting to ServiceNow at $CONFIG->{servicenow}->{url}";
$SNOW->connect or die "could not connect to SN\n";

## If we got '--group all', then we want to parse all groups that a given user
### belongs to; otherwise, we just want to use that user as the grouo name

our @GROUPS;
if (lc $GROUP eq 'all') { @GROUPS = $SNOW->user_in_groups ($USER) }
else                    { @GROUPS = $GROUP }

my $time = UnixDate ($DATE, "%s") || time;

my @return;

debug "Querying '$QUERY'/'$SUBQUERY' against '$TYPE'";
if    (lc $QUERY eq 'unresolved') {
    foreach my $grp (@GROUPS) {
        push @return, $SNOW->text_tktlist_unresolved ($TYPE, $grp, $time), '';
    }
}

elsif (lc $QUERY eq 'unassigned') {
    foreach my $grp (@GROUPS) {
        push @return, $SNOW->text_tktlist_unassigned ($TYPE, $grp);
    }
}

elsif (lc $QUERY eq 'group') {
    foreach my $grp (@GROUPS) {
        push @return, $SNOW->text_tktlist_group ($TYPE, $grp, $SUBQUERY), '';
    }
}

elsif (lc $QUERY eq 'assign') {
    push @return, $SNOW->text_tktlist_assignee ($TYPE, $USER, $SUBQUERY);
}

elsif (lc $QUERY eq 'submit') {
    push @return, $SNOW->text_tktlist_submit ($TYPE, $USER, $SUBQUERY);
}

else { pod2usage( -verbose => 1 ) }

print join ("\n", @return, '');

exit 0;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item B<--config> F<FILE>

Which configuration file should we load?  The default points at
F</etc/snow/config.yaml>.

=item B<--date> F<DATESTRING>

Any string that can be parsed by B<Date::Manip> into a seconds-since-epoch
string.  Used in B<--query unresolved> to determine a start date for some ticket
queries.  

Defaults to 'now'.  Applies to type F<unresolved>.

=item B<--group> F<GROUP>

Run the query with the group F<GROUP>.  If F<GROUP> is I<all>, then we will
select groups based on the value of F<USER> (which defaults to the running
user).

=item B<--query> [unresolved|unassigned|group|assign|submit]

What kind of query should we run?

=over 4

=item assign

Show tickets assigned to user F<USER>.

=item group

Show tickets assigned to group F<GROUP>.  

Default: 'all'.

=item submit

Show tickets submitted by user F<USER>.

=item unassigned

Show tickets in group(s) F<GROUP> that have not been assigned to a person.

=item unresolved

Show tickets in group(s) F<GROUP> that have not been resolved, and which were 
submitted before the date specified in I<DATE>.

=back

Default: 'group'

=item B<--subquery> [open|closed|unresolved]

For most query types we can further filter based on subquerys.  Specifically:

    closed          Only show closed tickets.
    open            Only show open tickets.     (default)
    unresolved      Only show unresolved tickets.

Applies to types F<group>, F<assign>, or F<submit>.

=item B<--type> F<TABLE>

Chooses which ticket type to query.  Choices:

    incident        Incident
    request         Request
    ritm            Request Item
    task            Task        

Defaults to F<incident>.

=item B<--user> F<USER>

Run the query with user F<USER>.  Defaults to the user running the program.

=item B<--debug>

Print debugging information on STDERR.

=item B<--help>

Prints out basic full help documentation and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<FNAL::SNOW>

=head1 EXAMPLES

    snow-ticket-list --query assign
    snow-ticket-list --query group  --user tskirvin
    snow-ticket-list --query submit --user tskirvin --subquery closed
    snow-ticket-list --query unassigned --group ECF-CIS
    snow-ticket-list --query unresolved --group all --user tskirvin

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
