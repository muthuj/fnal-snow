#!/usr/bin/env perl

=head1 NAME

snow-request-create - create a Service Now request

=head1 SYNOPSIS

echo "test" | B<snow-request-create> --subject 'testing' --group ECF-CIS

B<snow-request-create> --man

=head1 DESCRIPTION

snow-request-create creates and assigns a new Incident.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

our $CONFIG_FILE = '/etc/snow/config.yaml';

our $DEBUG = 0;
our $TYPE = 'request';
our $USER  = $ENV{'REMOTE_USER'} || $ENV{'USER'} || getpwuid ($>);

use vars qw/$USER $GROUP $SUBJECT $TICKET_FILE/;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use FNAL::SNOW;
use YAML::Syck;

$|++;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### error_usage (ERROR)
# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-msg => $error, -exit_status => 2, -verbose => 1);
}

### load_yaml (FILE)
# Load a configuration file from YAML
sub load_yaml {
    my ($file) = @_;
    my $yaml = YAML::Syck::LoadFile ($file);
    unless ($yaml) { die "could not open $file: $@\n" }
    return $yaml;
}

### debug (MSG)
# Print a debugging message if $DEBUG is set.
sub debug { if ($DEBUG) { warn "@_\n" } }

### set_ticket (FIELD, VALUE)
# Updates value of the ticket
sub set_ticket { 
    my ($ticket, $field, $value) = @_;
    $ticket->{'ticket'}->{$field} = $value;
}

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    'd|debug'    => \$DEBUG,
    'c|config=s' => \$CONFIG_FILE,
    't|ticket=s' => \$TICKET_FILE,
    'u|user=s'   => \$USER,
    'subject=s'  => \$SUBJECT,
    'man'        => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'     => sub { pod2usage (-verbose => 1) }) || error_usage ();

my $TICKET = load_yaml ($TICKET_FILE);

# set_ticket ($TICKET, 'u_request_description', $SUBJECT);

debug "Creating FNAL::SNOW object: $CONFIG_FILE";
my $SNOW = FNAL::SNOW->init ('config_file' => $CONFIG_FILE, 'debug' => $DEBUG);
my $CONFIG = $SNOW->config_hash;

debug "Connecting to ServiceNow at $CONFIG->{servicenow}->{url}";
$SNOW->connect or die "could not connect to SN\n";

debug "Looking up user '$USER'";
my $u = $SNOW->user_by_username ($USER);
unless ($u) { die "invalid user: $USER\n" }
my $uid = $u->{'sys_id'};
# set_ticket ($TICKET, 'requested_for', $uid);

debug ("creating a new entry in Service Now");
my $tktnum = $SNOW->tkt_create ($TYPE, %{$TICKET->{ticket}});
die "unable to create ticket\n" unless $tktnum;

debug "Looking up tkt '$tktnum'";
my @tkt = $SNOW->tkt_by_number ($tktnum);
unless (@tkt) { die "unable to load tkt: '$tktnum'\n"; }
unless (scalar @tkt == 1) {
    die "too many matches for tkt '$tktnum'\n";
}
my $tkt = $tkt[0];

print scalar $SNOW->tkt_string_short ($SNOW->tkt_by_number ($tktnum));
exit 0;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=head2 REQUIRED FIELDS

=over 4

=item (STDIN)

The text of the message description comes on STDIN.

=item B<--subject> I<TEXT>

Corresponds to the I<short_description> field.

ID of a ticket number to update.  You can leave off the F<INC0+> values.

=item B<--ticket> I<YAML>

The default ticket fields come from a local YAML file, which looks something
like this:

    ticket:
        assignment_group:       'ECF-CIS'
        group:                  'ECF-CIS'
        impact:                 '4'
        short_description:      '(no subject)'
        u_categorization:       'Hardware -- Server -- Linux'
        u_item:                 'Linux'
        u_operational_category: 'Break/Fix'
        u_page_primary:         '0'
        u_reported_source:      'Event Monitoring'
        urgency:                '4'
        u_service:              'Scientific Services'
        u_service_type:         'Server'

Required.

=back

=head2 OTHER FIELDS

=over4 

=item B<--config> I<CONFIG>

Configuration file, instead of F</etc/snow/config.yaml>.

=item B<--debug>

Print debugging information on STDERR.


=item B<--user> I<USER>

Assign the ticket to user I<USER>.  No default; if we don't get a value, we
won't update the assigned_to value.

=item B<--help>

Prints out basic full help documentation and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<FNAL::SNOW>

=head1 EXAMPLE

    echo "testing" | snow-request-create --ticket template.yaml \
        --subject testing --group ECF-CIS

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014-2015, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
