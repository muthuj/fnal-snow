#!/usr/bin/env perl

=head1 NAME

snow-ticket-unassign - assign a Service Now ticket to the Service Desk

=head1 SYNOPSIS

B<snow-ticket-unassign> F<INCIDENT_NUMBER>

B<snow-ticket-unassign> --man

=head1 DESCRIPTION

snow-ticket-unassign sets the B<assignment_group> of a ticket back to 'Service
Desk', and sets the B<dv_u_request_reassignment> field as well.  The updated
Incident information is then printed to STDOUT.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

our $CONFIG_FILE = '/etc/snow/config.yaml';

our $DEBUG = 0;
our $GROUP = 'Service Desk';

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use FNAL::SNOW;

$|++;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### error_usage (ERROR)
# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-msg => $error, -exit_status => 2, -verbose => 1);
}

### debug (MSG)
# Print a debugging message if $DEBUG is set.
sub debug { if ($DEBUG) { warn "@_\n" } }

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    'd|debug'    => \$DEBUG,
    'c|config=s' => \$CONFIG_FILE,
    'g|group=s'  => \$GROUP,
    'man'        => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'     => sub { pod2usage (-verbose => 1) }) || error_usage ();

my ($tktnum, @rest) = @ARGV;
error_usage ("no tkt listed" ) unless ($tktnum);

debug "Creating FNAL::SNOW object: $CONFIG_FILE";
my $SNOW = FNAL::SNOW->init ('config_file' => $CONFIG_FILE, 'debug' => $DEBUG);
my $CONFIG = $SNOW->config_hash;

debug "Connecting to ServiceNow at $CONFIG->{servicenow}->{url}";
$SNOW->connect or die "could not connect to SN\n";

debug "Looking up tkt '$tktnum'";
my @tkt = $SNOW->tkt_by_number ($tktnum);
unless (@tkt) { die "unable to load tkt: '$tktnum'\n"; }
unless (scalar @tkt == 1) { die "too many matches for tkt '$tktnum'\n"; }
my $tkt = $tkt[0];

debug ("Assigning tkt to $GROUP");
my @return = $SNOW->tkt_update ($tkt,
    'assignment_group'          => $GROUP,
    'assigned_to'               => 0,
    'dv_u_request_reassignment' => 1
);

if    (scalar @return > 1) { die "too many matches after update\n" }
elsif (scalar @return < 1) { die "failed to reassign: no matches found\n" }

foreach my $ret (@return) {
    my $error = $SNOW->tkt_compare ($tkt, $ret);
    if ($error) { die "error: $error\n" }
}

print scalar $SNOW->tkt_string_short ($SNOW->tkt_by_number ($tktnum));
exit 0;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item I<INCIDENT_NUMBER>

ID of a ticket number to update.  You can leave off the F<INC0+> values.

=item B<--debug>

Print debugging information on STDERR.

=item B<--group> I<GROUP>

Assign the ticket to group I<GROUP>.  Defaults to I<Service Desk>.

=item B<--help>

Prints out basic full help documentation and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<FNAL::SNOW>

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014-2015, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
